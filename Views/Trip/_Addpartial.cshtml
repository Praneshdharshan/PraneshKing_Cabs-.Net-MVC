@model IEnumerable<PraneshKing_Cabs.Models.Trip>




<<div class="container mt-5 form-container">
    @if (Session["RoleName"].ToString() == "User")
    {
        <div class="text-center banner" style="margin-top:6%;">
            <h1>Welcome Back, @ViewBag.Greeting</h1>
            <p class="lead">Explore our features and get started with our services today.</p>
        </div>
    }

    <h2 class="mb-4">Add Trip Details</h2>
    <form id="tripForm" class="border p-4 rounded">
        <input id="TripID" hidden>

        <div class="form-group col-md-12">
            <label for="customerName" class="required">Customer Name</label>
            <select id="customerName" name="CustomerID" class="form-control">
                <option value="">Select customer</option>
                @foreach (var customername in ViewBag.customernameSelectList)
                {
                    <option value="@customername.Value">@customername.Text</option>
                }
            </select>
            <div class="error-message" id="customerNameError"></div>
        </div>

        <div class="form-group col-md-12">
            <label for="driverName" class="required">Driver Name</label>
            <select id="cabID" name="CabID" class="form-control">
                <option value="">Select driver</option>
                @foreach (var driver in ViewBag.DriverSelectList)
                {
                    <option value="@driver.Value">@driver.Text</option>
                }
            </select>
            <div class="error-message" id="driverNameError"></div>
        </div>

        <div class="form-group col-md-12">
            <label for="pickupDate" class="required">Pickup Date</label>
            <input type="date" id="pickupDate" name="PickupDate" class="form-control" autocomplete="off"
                   min="" max="">
            <div class="error-message" id="pickupDateError"></div>
        </div>


        <div class="form-group col-md-12">
            <label for="pickupLocation" class="required">Pickup Location</label>
            <input type="text" id="pickupLocation" name="PickupLocation" class="form-control" placeholder="Enter pickup location" autocomplete="off">
            <div class="error-message" id="pickupLocationError"></div>
        </div>

        <div class="form-group col-md-12">
            <label for="dropLocation" class="required">Drop Location</label>
            <input type="text" id="dropLocation" name="DropLocation" class="form-control" placeholder="Enter drop location" autocomplete="off">
            <div class="error-message" id="dropLocationError"></div>
        </div>

        <div class="form-group col-md-12" style="display: none;">
            <label for="kilometer" class="required">Kilometer</label>
            <input type="number" id="kilometer" name="Kilometer" class="form-control" placeholder="Enter kilometers" autocomplete="off" value="0" disabled>
            <div class="error-message" id="kilometerError"></div>
        </div>

        <div class="form-group col-md-12" style="display: none;">
            <label for="amount" class="required">Amount</label>
            <input type="number" id="amount" name="Amount" class="form-control" placeholder="Enter amount" autocomplete="off" value="0" disabled>
            <div class="error-message" id="amountError"></div>
        </div>
        @if (Session["RoleName"].ToString() == "Admin")
        {
            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary" onclick="return Add(event)" id="addButton" style="width: 45%; border-radius:20px; margin-top:30px; margin-right:10px;">Add Trip</button>
                <button type="button" class="btn btn-default" onclick="return closeForm()" id="closeButton" style="width: 45%; border-radius: 20px; margin-top: 30px;">Cancel</button>
            </div>
        }
        @if (Session["RoleName"].ToString() == "User")
        {
            <div class="form-group text-center">
                <button type="submit" class="btn btn-primary" onclick="return Add(event)" id="addButton" style="width: 45%; border-radius:20px; margin-top:30px; margin-right:10px;">Add Trip</button>

            </div>

        }

    </form>
</div>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
    function closeForm() {
        // Replace the URL with the desired redirection target
        window.location.href = "/Trip/TripList/";
        return false; // Prevent any default form action if this is within a form
    }

    var today = new Date();
    var currentYear = today.getFullYear();

    // Set min and max attributes for pickupDate input
    var pickupDateInput = document.getElementById('pickupDate');
    pickupDateInput.min = today.toISOString().split('T')[0]; // Sets min date as today
    pickupDateInput.max = currentYear + '-12-31';

    function Add(event) {
        event.preventDefault();
        var roleName = '@ViewBag.RoleName';
        // Clear previous error messages
        $('.error-message').text('');
        // Get form value
        var customerName = $('#customerName').val();
        var cabID = $('#cabID').val();
        var pickupDate = $('#pickupDate').val();
        var pickupLocation = $('#pickupLocation').val();
        var dropLocation = $('#dropLocation').val();
        var kilometer = $('#kilometer').val();
        var amount = $('#amount').val();
        var isValid = true;

        if (customerName.trim() === "") {
            $('#customerNameError').text('Customer name is required.');
            isValid = false;
        }

        if (cabID.trim() === "") {
            $('#driverNameError').text('Driver name is required.');
            isValid = false;
        }

        // Validate Pickup Date
        if (pickupDate.trim() === "") {
            $('#pickupDateError').text('Pickup date is required.');
            isValid = false;
        }

        // Validate Pickup Location
        if (pickupLocation.trim() === "") {
            $('#pickupLocationError').text('Pickup location is required.');
            isValid = false;
        }

        // Validate Drop Location
        if (dropLocation.trim() === "") {
            $('#dropLocationError').text('Drop location is required.');
            isValid = false;
        }

        if (isValid) {
            Swal.fire({
                title: 'Are you sure?',
                text: "Do you want to add this Trip?",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, add it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    $.ajax({
                        url: "/Trip/InsertTrip/",
                        type: "POST",
                        data: {
                            CustomerID: customerName,
                            CabID: cabID,
                            PickupDate: pickupDate,
                            PickupLocation: pickupLocation,
                            DropLocation: dropLocation,
                            Kilometer: kilometer,
                            Amount: amount

                        },
                        success: function (data) {
                            if (data.noOfRowsAffected > 0) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Trip added successfully',
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then((result) => {
                                    if (result.isConfirmed) {
                                        if (roleName == "Admin") {
                                            window.location.href = "/Trip/TripList/";
                                        } else if (roleName == "User") {
                                            window.location.href = "/Trip/Add/";
                                        }
                                    }
                                });
                            } else {
                                Swal.fire({
                                    title: 'Failed!',
                                    text: 'Failed inserting Trip, please try again.',
                                    icon: 'error',
                                    confirmButtonText: 'OK'
                                });
                            }
                        },
                        error: function (errormessage) {
                            Swal.fire({
                                title: 'Error!',
                                text: "Error: " + errormessage.responseText,
                                icon: 'error',
                                confirmButtonText: 'OK'
                            });
                        }
                    });
                }
            });
        } else {
            $('html, body').animate({
                scrollTop: 0
            }, 500);
        }
    }

    $(document).ready(function () {

        function countSpaces(str) {
            return (str.match(/ /g) || []).length;
        }

        $('#customerName').on('keyup change', function () {
            var value = $(this).val().trim();
            if (value === "") {
                $('#customerNameError').text('Customer name is required.');
            } else {
                $('#customerNameError').text('');
            }
        });

        $('#cabID').on('keyup change', function () {
            var value = $(this).val().trim();
            if (value === "") {
                $('#driverNameError').text('Driver name is required.');
            } else {
                $('#driverNameError').text('');
            }
        });

        $('#pickupDate').on('keyup change', function () {
            var value = $(this).val().trim();
            if (value === "") {
                $('#pickupDateError').text('Pickup date is required.');
            } else {
                $('#pickupDateError').text('');
            }
        });

        $('#pickupLocation').on('keyup change', function () {
            var value = $(this).val().trim();
            if (value === "") {
                $('#pickupLocationError').text('Pickup location is required.');
            } else if (value.length > 28) {
                $(this).val(value.substring(0, 28)); // Truncate input to maxLength
                $('#pickupLocationError').text('Pickup location cannot exceed 28 characters.');
            } else if (countSpaces(value) > 2) {
                $('#pickupLocationError').text('Pickup location cannot contain more than 2 spaces.');
            } else {
                $('#pickupLocationError').text('');
            }
        }).on('keypress', function (e) {
            var regex = /^[a-zA-Z\s]*$/; // Allow letters and spaces
            var charCode = (e.which) ? e.which : e.keyCode;
            var currentValue = $(this).val() + String.fromCharCode(charCode);

            if (!regex.test(currentValue) || currentValue.length > 28 || countSpaces(currentValue) > 2) {
                e.preventDefault();
                return false;
            }
        });



        $('#dropLocation').on('keyup change', function () {
            var value = $(this).val().trim();
            if (value === "") {
                $('#dropLocationError').text('Drop location is required.');
            } else if (value.length > 28) {
                $(this).val(value.substring(0, 28)); // Truncate input to maxLength
                $('#dropLocationError').text('Drop location cannot exceed 28 characters.');
            } else if (countSpaces(value) > 2) {
                $('#dropLocationError').text('Drop location cannot contain more than 2 spaces.');
            } else {
                $('#dropLocationError').text('');
            }
        }).on('keypress', function (e) {
            var regex = /^[a-zA-Z\s]*$/; // Allow letters and spaces
            var charCode = (e.which) ? e.which : e.keyCode;
            var currentValue = $(this).val() + String.fromCharCode(charCode);

            if (!regex.test(currentValue) || currentValue.length > 28 || countSpaces(currentValue) > 2) {
                e.preventDefault();
                return false;
            }
        });


    });

</script>

